{"version":3,"sources":["taskboard/TaskboardTypes.ts","app/logo.png","taskboard/TaskboardItemFormModal.tsx","taskboard/TaskboardLoginModal.tsx","shared/SharedHooks.ts","shared/BaseTooltip.tsx","taskboard/TaskboardItemCard.tsx","taskboard/TaskboardCol.tsx","taskboard/Taskboard.tsx","app/App.tsx","shared/SharedUtils.ts","reportWebVitals.ts","index.tsx"],"names":["TaskboardItemStatus","TaskboardItemFormModal","visible","initialValues","onCancel","onOk","Form","useForm","form","inputRef","useRef","useEffect","current","focus","resetFields","title","destroyOnClose","forceRender","submit","autoComplete","layout","onFinish","values","Item","name","label","rules","required","message","max","ref","autoFocus","TextArea","rows","setAuth","fetchCreds","key_","a","fetch","method","headers","Accept","Authorization","key","result","json","res","success","localStorage","setItem","user","pkey","id","Error","setTimeout","getUser","uid","getItem","goTry","then","error","console","data","body","JSON","stringify","createNote","note","updateClickCount","oldTitle","BaseTooltip","props","mouseEnterDelay","StyledCard","styled","Card","TaskboardItemCardTitle","Typography","Title","DeleteMenuItem","Menu","red","primary","TaskboardItemCard","item","status","onEdit","onDelete","likedNotes","useState","likedBy","length","clicks","setClicks","wasLikedNote","setWasLikedNote","setCreatedBy","isFirstRun","includes","createdBy","updateUser","parent","likes","description","pos","updateCount","size","overlay","level","ellipsis","extra","style","marginLeft","border","onClick","icon","LikeFilled","color","LikeTwoTone","count","showZero","offset","opacity","backgroundColor","EditOutlined","disabled","DeleteOutlined","Modal","confirm","content","itemToDelete","trigger","MoreOutlined","Paragraph","type","TaskboardColRoot","TaskboardCol","items","onClickAdd","background","borderColor","map","index","TaskboardRoot","div","TaskboardContent","defaultItems","WENT_WELL","NEEDS_IMPROVEMENT","ACTION_ITEMS","APPRECIATIONS","Taskboard","initialValue","state","setState","obj","results","push","fetchData","useSyncedState","itemsByStatus","setItemsByStatus","isModalVisible","setIsModalVisible","auth","setUid","setLikedNotes","firstRender","useDidMountEffect","getUsr","authRes","statusToEdit","setStatusToEdit","itemToEdit","setItemToEdit","openTaskItemModal","closeTaskItemModal","handleDelete","deleteNote","produce","draft","filter","useMemo","Object","draftItem","flatMap","find","updateNote","StyledLayout","Layout","StyledHeader","Header","StyledContent","Content","App","src","Logo","height","padding","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.612a5815.chunk.js","sourcesContent":["export interface TaskboardItem {\n  id: string;\n  title: string;\n  description: string;\n  createdBy: string;\n  likes: number;\n  likedBy: string[];\n}\nexport interface KeyMatch {\n  key: string;\n}\n\nexport interface LikedBy {\n  uid: string;\n  pos: number;\n}\nexport interface NoteItem {\n  createdBy: string;\n  description: string;\n  likes: number;\n  parent: string;\n  title: string;\n  likedBy: LikedBy;\n}\n\nexport enum TaskboardItemStatus {\n  WENT_WELL = 'What Went Well',\n  NEEDS_IMPROVEMENT = 'Needs To Be Improved',\n  ACTION_ITEMS = 'Action Items',\n  APPRECIATIONS = 'Appreciations',\n}\n","export default __webpack_public_path__ + \"static/media/logo.c8e6348b.png\";","import { useEffect, useRef } from 'react';\nimport { Modal, Form, ModalProps, Input } from 'antd';\nimport { TaskboardItem } from './TaskboardTypes';\n\nexport type TaskboardItemFormValues = Pick<\n  TaskboardItem,\n  'title' | 'description' | 'likes' | 'id' | 'likedBy' | 'createdBy'\n>;\n\ntype TaskboardItemFormModalProps = Pick<ModalProps, 'visible'> & {\n  initialValues: TaskboardItemFormValues;\n  onCancel: VoidFunction;\n  onOk: (values: TaskboardItemFormValues) => void;\n};\n\nfunction TaskboardItemFormModal({\n  visible,\n  initialValues,\n  onCancel,\n  onOk,\n}: TaskboardItemFormModalProps) {\n  const [form] = Form.useForm<TaskboardItemFormValues>();\n\n  const inputRef = useRef<Input>(null);\n\n  useEffect(() => {\n    if (visible) {\n      // Focus on the first input when the modal is opened\n      inputRef.current?.focus();\n      form.resetFields();\n    }\n  }, [form, visible]);\n\n  return (\n    <Modal\n      title=\"Add Item\"\n      visible={visible}\n      destroyOnClose\n      // To make dynamically changing initialValues work with Form\n      forceRender\n      onCancel={onCancel}\n      onOk={() => form.submit()}\n    >\n      <Form\n        autoComplete=\"off\"\n        form={form}\n        layout=\"vertical\"\n        initialValues={initialValues}\n        onFinish={(values) => {\n          onOk(values);\n          form.resetFields();\n          onCancel();\n        }}\n      >\n        <Form.Item\n          name=\"title\"\n          label=\"Title\"\n          rules={[\n            { required: true, message: \"'Title' is required\" },\n            {\n              max: 100,\n              message: \"'Title' can not be longer than 100 characters\",\n            },\n          ]}\n        >\n          <Input ref={inputRef} autoFocus />\n        </Form.Item>\n        <Form.Item\n          name=\"description\"\n          label=\"Description\"\n          rules={[\n            { required: true, message: \"'Description' is required\" },\n            {\n              max: 400,\n              message: \"'Description' can not be longer than 400 characters\",\n            },\n          ]}\n        >\n          <Input.TextArea rows={4} />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default TaskboardItemFormModal;\n","import { useEffect, useRef, useState } from 'react';\nimport { Modal, Form, ModalProps, Input } from 'antd';\nimport { TaskboardItem, KeyMatch } from './TaskboardTypes';\n\nexport type TaskboardItemFormValues = Pick<\n  TaskboardItem,\n  'title' | 'description' | 'likes' | 'id' | 'likedBy' | 'createdBy'\n>;\n\ntype TaskboardLoginModalProps = Pick<ModalProps, 'visible'> & {\n  initialValues: TaskboardItemFormValues;\n  onCancel: VoidFunction;\n  onOk: (values: TaskboardItemFormValues) => void;\n  setAuth: (val: boolean) => void;\n};\n\nfunction TaskboardItemFormModal({\n  visible,\n  initialValues,\n  onCancel,\n  onOk,\n  setAuth,\n}: TaskboardLoginModalProps) {\n  const [form] = Form.useForm<TaskboardItemFormValues>();\n  const inputRef = useRef<Input>(null);\n\n  useEffect(() => {\n    if (visible) {\n      // Focus on the first input when the modal is opened\n      inputRef.current?.focus();\n      form.resetFields();\n    }\n  }, [form, visible]);\n\n  const fetchCreds = async (key_: any) => {\n    let result = await fetch(\n      // 'http://localhost:8080/v1/auth/register',\n      'https://pearson-retro.herokuapp.com/v1/auth/register',\n      {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          Authorization: key_.key,\n        },\n      }\n    );\n    const res = await result.json();\n    if (res.success === 'true') {\n      try {\n        localStorage.setItem('secret', res.user.pkey);\n        localStorage.setItem('uid', res.user.id);\n      } catch (error) {\n        throw new Error('Failed setting the key');\n      }\n      setTimeout(() => {\n        setAuth(true);\n      }, 500);\n    }\n  };\n\n  return (\n    <Modal\n      title=\"Log In\"\n      visible={visible}\n      destroyOnClose\n      // To make dynamically changing initialValues work with Form\n      forceRender\n      onCancel={onCancel}\n      onOk={() => form.submit()}\n    >\n      <Form\n        autoComplete=\"off\"\n        form={form}\n        layout=\"vertical\"\n        initialValues={initialValues}\n        onFinish={(values) => {\n          fetchCreds(values);\n          onOk(values);\n          form.resetFields();\n          onCancel();\n        }}\n      >\n        <Form.Item\n          name=\"key\"\n          label=\"Key\"\n          rules={[\n            { required: true, message: \"'Key' is required\" },\n            {\n              max: 100,\n              message: \"'Key' can not be longer than 100 characters\",\n            },\n          ]}\n        >\n          <Input ref={inputRef} autoFocus />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default TaskboardItemFormModal;\n","import { goTry } from 'go-try';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { NoteItem } from '../taskboard/TaskboardTypes';\n\nexport const useDidMountEffect = () => {\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    firstRender.current = false;\n  }, []);\n\n  return firstRender.current;\n};\n\nexport async function getUser() {\n  let pkey: string;\n  let uid: string;\n  try {\n    uid = localStorage.getItem('uid') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read the uid');\n  }\n  try {\n    pkey = localStorage.getItem('secret') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read key');\n  }\n  const result = await goTry(() =>\n    fetch(`https://pearson-retro.herokuapp.com/v1/users/${uid}`, {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: pkey,\n      },\n    }).then((res) => res.json())\n  );\n  if (result.error) {\n    console.error('Error getting the user', result.error);\n    return;\n  }\n  return result.data;\n}\n\nexport async function updateUser(body: any) {\n  let pkey: string;\n  let uid: string;\n  try {\n    uid = localStorage.getItem('uid') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read the uid');\n  }\n  try {\n    pkey = localStorage.getItem('secret') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read key');\n  }\n  const result = await goTry(() =>\n    fetch(`https://pearson-retro.herokuapp.com/v1/users/${uid}`, {\n      method: 'PATCH',\n      body: JSON.stringify(body),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: pkey,\n      },\n    }).then((res) => res.json())\n  );\n  if (result.error) {\n    console.error('Error updating user', result.error);\n    return;\n  }\n}\nexport async function createNote(note: NoteItem) {\n  let pkey: string;\n  try {\n    pkey = localStorage.getItem('secret') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read key');\n  }\n  const result = await goTry(() =>\n    fetch('https://pearson-retro.herokuapp.com/v1/users/notes', {\n      method: 'POST',\n      body: JSON.stringify(note),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: pkey,\n      },\n    }).then((res) => res.json())\n  );\n  if (result.error) {\n    console.error('Error creating note', result.error);\n    return;\n  }\n}\n\nexport async function updateClickCount(note: NoteItem) {\n  let pkey: string;\n  try {\n    pkey = localStorage.getItem('secret') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read key');\n  }\n  const result = await goTry(() =>\n    fetch(`https://pearson-retro.herokuapp.com/v1/users/notes/${note.title}`, {\n      method: 'PATCH',\n      body: JSON.stringify(note),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: pkey,\n      },\n    }).then((res) => res.json())\n  );\n  if (result.error) {\n    console.error('Error creating note', result.error);\n    return;\n  }\n  return result.data;\n}\n\nexport async function updateNote(oldTitle: string, note: NoteItem) {\n  let pkey: string;\n  try {\n    pkey = localStorage.getItem('secret') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read key');\n  }\n  const result = await goTry(() =>\n    fetch(`https://pearson-retro.herokuapp.com/v1/users/notes/${oldTitle}`, {\n      method: 'PATCH',\n      body: JSON.stringify(note),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: pkey,\n      },\n    }).then((res) => res.json())\n  );\n  if (result.error) {\n    console.error('Error updating note', result.error);\n    return;\n  }\n}\n\nexport async function deleteNote(note: any) {\n  let pkey: string;\n  try {\n    pkey = localStorage.getItem('secret') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read key');\n  }\n  const result = await goTry(() =>\n    fetch(`https://pearson-retro.herokuapp.com/v1/users/notes/${note.title}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: pkey,\n      },\n    })\n  );\n  if (result.error) {\n    console.error('Error deleting note', result.error);\n    return;\n  }\n}\n\nexport function useSyncedState<T>(\n  key: string,\n  initialValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>] {\n  const [state, setState] = useState<any>();\n  let pkey: string;\n  try {\n    pkey = localStorage.getItem('secret') ?? '';\n  } catch (error) {\n    throw new Error('Failed to read key');\n  }\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await goTry(() =>\n        fetch('https://pearson-retro.herokuapp.com/v1/users/notes', {\n          headers: {\n            Authorization: pkey,\n          },\n        }).then((res) => res.json())\n      );\n      if (result.error) {\n        console.error('Error fetching notes', result.error);\n        return;\n      }\n      let obj: { [index: string]: any[] } = {};\n      result.data.results &&\n        result.data.results.map((item: NoteItem) => {\n          if (obj[item.parent]) obj[item.parent].push(item);\n          else obj[item.parent] = [item];\n        });\n      setState({ ...initialValue, ...obj });\n    };\n    fetchData();\n  }, [initialValue, pkey]);\n\n  return [state || initialValue, setState];\n}\n","import { Tooltip, TooltipProps } from 'antd';\n\ntype BaseTooltipProps = TooltipProps;\n\nfunction BaseTooltip(props: BaseTooltipProps) {\n  return <Tooltip mouseEnterDelay={1.5} {...props} />;\n}\n\nexport default BaseTooltip;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Button, Card, Modal, Typography, Dropdown, Menu, Badge } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport { updateClickCount, updateUser } from '../shared/SharedHooks';\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  MoreOutlined,\n  LikeFilled,\n  LikeTwoTone,\n} from '@ant-design/icons';\nimport { red } from '@ant-design/colors';\nimport styled from 'styled-components';\nimport BaseTooltip from '../shared/BaseTooltip';\n\nconst StyledCard = styled(Card)`\n  margin: 0.5rem;\n  padding: 0.5rem;\n  background-color: '#fff';\n`;\n\nconst TaskboardItemCardTitle = styled(Typography.Title)`\n  white-space: pre-wrap;\n  // To make ellipsis of the title visible.\n  // Without this margin, it can be go behind the \"extra\" component.\n  // So, we give it a little space.\n  margin-right: 0.25rem;\n`;\n\nconst DeleteMenuItem = styled(Menu.Item)`\n  color: ${red.primary};\n`;\n\nexport interface TaskboardItemCardProps {\n  item: TaskboardItem;\n  status: TaskboardItemStatus;\n  likedNotes: string[];\n  uid: string | null;\n  onEdit: (itemToEdit: TaskboardItem, status: TaskboardItemStatus) => void;\n  onDelete: (args: {\n    status: TaskboardItemStatus;\n    itemToDelete: TaskboardItem;\n  }) => void;\n}\n\nfunction TaskboardItemCard({\n  item,\n  status,\n  onEdit,\n  uid,\n  onDelete,\n  likedNotes,\n}: TaskboardItemCardProps) {\n  const [clicks, setClicks] = useState(item.likedBy?.length || 0);\n  const [wasLikedNote, setWasLikedNote] = useState(false);\n  const [createdBy, setCreatedBy] = useState('');\n  const isFirstRun = useRef(true);\n\n  useEffect(() => {\n    if (isFirstRun.current) {\n      if (item.likedBy?.includes(uid || '')) {\n        setWasLikedNote(true);\n      }\n      isFirstRun.current = false;\n      return;\n    }\n    if (item.createdBy) {\n      setCreatedBy(item.createdBy);\n    }\n    if (item.id) {\n      updateUser({\n        likedNotes: [item.id],\n      });\n    }\n    const updateCount = async () => {\n      await updateClickCount({\n        createdBy: '',\n        parent: status,\n        title: item.title,\n        likes: likedNotes?.length,\n        description: item.description,\n        likedBy: { uid: uid || '', pos: wasLikedNote ? 1 : 0 },\n      });\n    };\n    updateCount();\n  }, [wasLikedNote]);\n\n  const onIconClick = () => {\n    if (item.id && item.createdBy !== uid) {\n      setWasLikedNote(!wasLikedNote);\n      setClicks(wasLikedNote ? clicks - 1 : clicks + 1);\n    }\n  };\n  return (\n    <StyledCard\n      size=\"small\"\n      title={\n        <BaseTooltip overlay={item.title}>\n          <span>\n            <TaskboardItemCardTitle level={5} ellipsis={{ rows: 7 }}>\n              {item.title}\n            </TaskboardItemCardTitle>\n          </span>\n        </BaseTooltip>\n      }\n      extra={\n        <>\n          <Button\n            style={{\n              marginLeft: '.4em',\n              border: 'none',\n            }}\n            size=\"small\"\n            onClick={onIconClick}\n            // icon={<LikeTwoTone style={{fill: 'red'}} theme=\"outlined\" twoToneColor=\"#eb2f96\"/>}\n            icon={\n              wasLikedNote ? (\n                <LikeFilled style={{ color: '#1690ff' }} />\n              ) : (\n                <LikeTwoTone />\n              )\n            }\n          />\n          <Badge\n            count={clicks}\n            showZero={true}\n            offset={[-5, -21]}\n            style={{\n              opacity: clicks ? 1 : 0,\n              border: '1px solid rgb(230 230 230)',\n              backgroundColor: 'rgb(230, 247, 255)',\n              color: 'rgb(24, 144, 255)',\n            }}\n          />\n          <Dropdown\n            overlay={\n              <Menu>\n                <Menu.Item\n                  icon={<EditOutlined />}\n                  onClick={() => onEdit(item, status)}\n                  disabled={item.createdBy !== uid}\n                >\n                  Edit\n                </Menu.Item>\n                <DeleteMenuItem\n                  icon={<DeleteOutlined />}\n                  disabled={item.createdBy !== uid}\n                  onClick={() =>\n                    Modal.confirm({\n                      title: 'Delete?',\n                      content: `Are you sure to delete \"${item.title}\"?`,\n                      onOk: () =>\n                        onDelete({\n                          status,\n                          itemToDelete: item,\n                        }),\n                    })\n                  }\n                >\n                  Delete\n                </DeleteMenuItem>\n              </Menu>\n            }\n            trigger={['click']}\n          >\n            <Button\n              style={{ marginLeft: '.4em' }}\n              size=\"small\"\n              icon={<MoreOutlined />}\n            />\n          </Dropdown>\n        </>\n      }\n    >\n      <BaseTooltip overlay={item.description}>\n        <Typography.Paragraph type=\"secondary\" ellipsis={{ rows: 50 }}>\n          {item.description}\n        </Typography.Paragraph>\n      </BaseTooltip>\n    </StyledCard>\n  );\n}\n\nexport default TaskboardItemCard;\n","import styled from 'styled-components';\nimport { Button, Card } from 'antd';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport TaskboardItemCard, { TaskboardItemCardProps } from './TaskboardItemCard';\n\nconst TaskboardColRoot = styled(Card)`\n  user-select: none;\n  flex: 1;\n  margin: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  // To force each flex item to have equal width\n  // even if they have long texts with no spaces etc.\n  min-width: 0;\n  > .ant-card-body {\n    overflow: hidden;\n    height: 100%;\n    padding: 0;\n  }\n`;\n\nexport type TaskboardColProps = Pick<\n  TaskboardItemCardProps,\n  'onEdit' | 'onDelete'\n> & {\n  items: TaskboardItem[];\n  likedNotes: string[];\n  uid: string | null;\n  status: TaskboardItemStatus;\n  onClickAdd?: VoidFunction;\n};\n\nfunction TaskboardCol({\n  items,\n  status,\n  onClickAdd,\n  onEdit,\n  onDelete,\n  likedNotes,\n  uid,\n}: TaskboardColProps) {\n  return (\n    <TaskboardColRoot\n      title={`${status} (${items.length})`}\n      extra={\n        onClickAdd && (\n          <Button\n            type=\"primary\"\n            style={{ background: '#017fa3', borderColor: '#017fa3' }}\n            onClick={onClickAdd}\n          >\n            Add\n          </Button>\n        )\n      }\n    >\n      {items.map((item, index) => {\n        return (\n          <div key={item.id}>\n            <TaskboardItemCard\n              uid={uid}\n              likedNotes={likedNotes}\n              item={item}\n              status={status}\n              onEdit={onEdit}\n              onDelete={onDelete}\n            />\n          </div>\n        );\n      })}\n    </TaskboardColRoot>\n  );\n}\n\nexport default TaskboardCol;\n","import { useMemo, useState, useEffect } from 'react';\nimport produce from 'immer';\nimport styled from 'styled-components';\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\nimport TaskboardItemFormModal, {\n  TaskboardItemFormValues,\n} from './TaskboardItemFormModal';\nimport LogInModal from './TaskboardLoginModal';\nimport TaskboardCol, { TaskboardColProps } from './TaskboardCol';\nimport {\n  useSyncedState,\n  createNote,\n  updateNote,\n  deleteNote,\n  useDidMountEffect,\n  getUser,\n} from '../shared/SharedHooks';\n\nconst TaskboardRoot = styled.div`\n  min-height: 0;\n  height: 100%;\n  min-width: 800px;\n  max-width: 2400px;\n  margin: auto;\n`;\n\nconst TaskboardContent = styled.div`\n  height: 100%;\n  padding: 0.5rem;\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst defaultItems = {\n  [TaskboardItemStatus.WENT_WELL]: [],\n  [TaskboardItemStatus.NEEDS_IMPROVEMENT]: [],\n  [TaskboardItemStatus.ACTION_ITEMS]: [],\n  [TaskboardItemStatus.APPRECIATIONS]: [],\n};\n\ntype TaskboardData = Record<TaskboardItemStatus, TaskboardItem[]>;\n\nfunction Taskboard() {\n  const [itemsByStatus, setItemsByStatus] = useSyncedState<TaskboardData>(\n    'itemsByStatus',\n    defaultItems\n  );\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [auth, setAuth] = useState(false);\n  const [uid, setUid] = useState<string | null>('');\n  const [likedNotes, setLikedNotes] = useState<string[]>([]); //item.likedNotes\n\n  const firstRender = useDidMountEffect();\n\n  useEffect(() => {\n    async function getUsr() {\n      let res = await getUser();\n      setLikedNotes(res?.likedNotes);\n    }\n    if (firstRender) {\n      getUsr();\n    }\n  }, [firstRender]);\n\n  useEffect(() => {\n    try {\n      const authRes = localStorage.getItem('secret');\n      const uid = localStorage.getItem('uid');\n      setUid(uid);\n      setAuth(!!authRes);\n    } catch (error) {\n      throw new Error('Failed getting the key');\n    }\n  }, [auth, setAuth]);\n\n  const [statusToEdit, setStatusToEdit] = useState<TaskboardItemStatus | null>(\n    null\n  );\n\n  const [itemToEdit, setItemToEdit] = useState<TaskboardItem | null>(null);\n\n  const openTaskItemModal = (\n    itemToEdit: TaskboardItem | null,\n    status: TaskboardItemStatus\n  ) => {\n    setStatusToEdit(status);\n    setItemToEdit(itemToEdit);\n    setIsModalVisible(true);\n  };\n\n  const closeTaskItemModal = () => {\n    setItemToEdit(null);\n    setIsModalVisible(false);\n  };\n\n  const handleDelete: TaskboardColProps['onDelete'] = ({\n    status,\n    itemToDelete,\n  }) => {\n    deleteNote(itemToDelete);\n    setItemsByStatus((current) =>\n      produce(current, (draft) => {\n        draft[status] = draft[status].filter(\n          (item) => item.id !== itemToDelete.id\n        );\n      })\n    );\n  };\n\n  const initialValues = useMemo<TaskboardItemFormValues>(\n    () => ({\n      title: itemToEdit?.title ?? '',\n      createdBy: itemToEdit?.createdBy ?? '',\n      id: itemToEdit?.id ?? '',\n      description: itemToEdit?.description ?? '',\n      likes: itemToEdit?.likes ?? 0,\n      likedBy: itemToEdit?.likedBy ?? [],\n    }),\n    [itemToEdit]\n  );\n  return auth ? (\n    <>\n      <TaskboardRoot>\n        <TaskboardContent>\n          {Object.values(TaskboardItemStatus).map((status) => (\n            <TaskboardCol\n              uid={uid}\n              likedNotes={likedNotes}\n              key={status}\n              status={status}\n              items={itemsByStatus[status]}\n              onClickAdd={() => openTaskItemModal(null, status)}\n              onEdit={openTaskItemModal}\n              onDelete={handleDelete}\n            />\n          ))}\n        </TaskboardContent>\n      </TaskboardRoot>\n      <TaskboardItemFormModal\n        visible={isModalVisible}\n        onCancel={closeTaskItemModal}\n        onOk={(values) => {\n          setItemsByStatus((current) => {\n            return produce(current, (draft) => {\n              if (itemToEdit) {\n                // Editing existing item\n                const draftItem = Object.values(draft)\n                  .flatMap((items) => items)\n                  .find((item) => item.id === itemToEdit.id);\n                if (draftItem) {\n                  updateNote(draftItem.title, {\n                    parent: statusToEdit || '',\n                    title: values.title,\n                    description: values.description,\n                    createdBy: '',\n                    likes: itemToEdit?.likes ?? 0,\n                    likedBy: { uid: uid ?? '', pos: 3 },\n                  });\n                  draftItem.title = values.title;\n                  draftItem.description = values.description;\n                  draftItem.id = values.id;\n                }\n              } else {\n                for (let item in TaskboardItemStatus) {\n                  if (\n                    TaskboardItemStatus[\n                      item as keyof typeof TaskboardItemStatus\n                    ] === statusToEdit\n                  ) {\n                    createNote({\n                      likedBy: { uid: uid || '', pos: 0 },\n                      createdBy: uid || '',\n                      parent:\n                        TaskboardItemStatus[\n                          item as keyof typeof TaskboardItemStatus\n                        ],\n                      title: values.title,\n                      likes: 0,\n                      description: values.description,\n                    });\n                    draft[\n                      TaskboardItemStatus[\n                        item as keyof typeof TaskboardItemStatus\n                      ]\n                    ].push({\n                      ...values,\n                    });\n                  }\n                }\n              }\n            });\n          });\n        }}\n        initialValues={initialValues}\n      />\n    </>\n  ) : (\n    <LogInModal\n      onCancel={closeTaskItemModal}\n      visible={true}\n      onOk={(values) => {}}\n      initialValues={initialValues}\n      setAuth={setAuth}\n    />\n  );\n}\n\nexport default Taskboard;\n","import { Typography } from 'antd';\nimport Layout, { Content, Header } from 'antd/lib/layout/layout';\nimport styled from 'styled-components';\nimport { colors } from '../shared/SharedUtils';\nimport Logo from './logo.png';\nimport Taskboard from '../taskboard/Taskboard';\n\nconst StyledLayout = styled(Layout)`\n  /* We can't use \"height: 100vh; width: 100vw;\" here.\n  Otherwise, when there is a horizontal scrollbar etc, \n  because that we set a constant height, there will be a vertical one too.  */\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nconst StyledHeader = styled(Header)`\n  display: flex;\n  align-items: center;\n  background-color: #fff;\n  padding-top: 1em;\n  padding-left: 0;\n`;\n\nconst StyledContent = styled(Content)`\n  background-color: ${colors.primary[6]};\n`;\n\nfunction App() {\n  return (\n    <StyledLayout>\n      <StyledHeader>\n        <img\n          src={Logo}\n          style={{ height: '50px', padding: '0 1em 1em 1em' }}\n          alt=\"pearson logo\"\n        />\n        <Typography.Title level={3} type=\"secondary\">\n          Prizm Retrospective Board\n        </Typography.Title>\n      </StyledHeader>\n      <StyledContent>\n        <Taskboard />\n      </StyledContent>\n    </StyledLayout>\n  );\n}\n\nexport default App;\n","export const colors = {\n  primary: '#017fa3',\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}